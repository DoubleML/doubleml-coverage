---
title: "DoubleML Coverage"

jupyter: python3
---

The website contains coverage simulations for the [DoubleML](https://docs.doubleml.org/stable/index.html)-package.

Most simulations are based on the [dataset generators](https://docs.doubleml.org/stable/api/api.html#dataset-generators) provided by the package, but sometimes contain slight deviations.
You can find the code for the simulations in the [GitHub repository](https://github.com/DoubleML/doubleml-coverage/tree/main).

## Coverage Simulations

Generally, the [DoubleML package](https://docs.doubleml.org/stable/index.html) solves a moment equation

$$
\mathbb{E}[\psi(W,\theta_0,\eta_0)] = 0
$$

where $W$ denotes the observed data, $\theta_0$ the parameter of interest, and $\eta_0$ a vector of nuisance functions/elements. Using the `confint()` method, the package provides confidence intervals $[\hat{\theta}_{\text{lower}}, \hat{\theta}_{\text{upper}}]$ for the parameter of interest $\theta_0$.

This repository verifies coverage properties of the confidence intervals provided by the package. Usually, the coverage is assessed by simulating $n_{\text{sim}}$ datasets and calculating the proportion of confidence intervals that cover the true parameter value

$$
\text{Coverage} = \frac{1}{n_{\text{sim}}} \sum_{i=1}^{n_{\text{sim}}} \mathbb{1}(\hat{\theta}_{\text{lower},i} \leq \theta_0 \leq \hat{\theta}_{\text{upper},i})
$$

for a nominal coverage level is $1-\alpha$.
The corresponding coverage results are highlighted according to the following color scheme:

```{python}
#| echo: false
#| output: asis
from utils.styling import get_coverage_tier_html_span

# Generate color legend using centralized configuration
good_span = get_coverage_tier_html_span("good")
medium_span = get_coverage_tier_html_span("medium")
poor_span = get_coverage_tier_html_span("poor")

from IPython.display import Markdown, display

markdown_output = f"""
* {good_span} if the deviation to the nominal level is below 5%
* {medium_span} if the deviation to the nominal level is above 5% and below 10%
* {poor_span} if the deviation to the nominal level is above 10%
"""

display(Markdown(markdown_output))
```

For simulations with multiple parameters of interest, usually pointwise and uniform coverage is assessed.

::: {.grid}

::: {.g-col-5}

Furthermore, the simulations provide the average length of the confidence intervals and the average absolute bias of the point estimates

$$
\begin{align*}
\text{Bias} &= \frac{1}{n_{\text{sim}}} \sum_{i=1}^{n_{\text{sim}}} |\hat{\theta}_i - \theta_0|\\
\text{CI Length} &= \frac{1}{n_{\text{sim}}} \sum_{i=1}^{n_{\text{sim}}} (\hat{\theta}_{\text{upper},i} - \hat{\theta}_{\text{lower},i}).
\end{align*}
$$

:::

::: {.g-col-7}

```{python}
#| echo: false
import numpy as np
import plotly.graph_objects as go

bias_color = '#009E73'
ci_color = '#0072B2'
point_estimate_color = '#E69F00'
ci_length_color = '#CC79A7'

# Parameters
np.random.seed(42)
sample_size = 30
true_mean = 0
true_sd = 1

# Generate sample data
sample = np.random.normal(loc=true_mean, scale=true_sd, size=sample_size)

# Calculate sample mean and standard error
sample_mean = np.mean(sample)
se = np.std(sample) / np.sqrt(sample_size)

# Calculate 95% CI
ci_low = sample_mean - 1.96 * se
ci_high = sample_mean + 1.96 * se

# Calculate bias
bias = sample_mean - true_mean

# Create plot
fig = go.Figure()

# Confidence Interval (horizontal)
fig.add_trace(go.Scatter(
    y=[1],
    x=[sample_mean],
    mode='markers',
    marker=dict(size=15, color=ci_color),
    error_x=dict(
        type='data',
        array=[sample_mean - ci_low],
        arrayminus=[ci_high - sample_mean],
        color=ci_color,
        thickness=5,
        width=5
    ),
    name='Confidence Interval',
    showlegend=False
))

fig.add_trace(go.Scatter(
    y=[None],
    x=[None],
    mode='lines',
    line=dict(color=ci_color, width=5),
    name='Confidence Interval'
))

# Point Estimate - Orange
fig.add_trace(go.Scatter(
    y=[1],
    x=[sample_mean],
    mode='markers',
    marker=dict(size=15, color=point_estimate_color, line=dict(color='black', width=2)),
    name='Point Estimate'
))

# True Value (as a cross) - Gray
fig.add_trace(go.Scatter(
    y=[1],
    x=[true_mean],
    mode='markers',
    marker=dict(symbol='x', size=15, color='#999999', line=dict(color='black', width=2)),
    name='True Value'
))

# Bias bracket
fig.add_shape(
    go.layout.Shape(
        type="line",
        y0=0.95,
        y1=0.95,
        x0=true_mean,
        x1=sample_mean,
        line=dict(color=bias_color, width=2),
    )
)
fig.add_shape(
    go.layout.Shape(
        type="line",
        y0=0.94,
        y1=0.96,
        x0=sample_mean,
        x1=sample_mean,
        line=dict(color=bias_color, width=2),
    )
)
fig.add_shape(
    go.layout.Shape(
        type="line",
        y0=0.94,
        y1=0.96,
        x0=true_mean,
        x1=true_mean,
        line=dict(color=bias_color, width=2),
    )
)

# CI length bracket
fig.add_shape(
    go.layout.Shape(
        type="line",
        y0=1.05,
        y1=1.05,
        x0=ci_low,
        x1=ci_high,
        line=dict(color=ci_length_color, width=2),
    )
)
fig.add_shape(
    go.layout.Shape(
        type="line",
        y0=1.04,
        y1=1.06,
        x0=ci_low,
        x1=ci_low,
        line=dict(color=ci_length_color, width=2),
    )
)
fig.add_shape(
    go.layout.Shape(
        type="line",
        y0=1.04,
        y1=1.06,
        x0=ci_high,
        x1=ci_high,
        line=dict(color=ci_length_color, width=2),
    )
)

# Bias annotation - Green
fig.add_annotation(
    y=0.9,  # Adjusted position
    x=(true_mean + sample_mean) / 2,
    text=f'Bias',
    font=dict(size=12, color=bias_color),
    align='center',
    bordercolor=bias_color,
    borderwidth=1,
    borderpad=4,
    bgcolor='rgba(255, 255, 255, 0.7)',
    showarrow=False  # Remove arrow
)

# CI length annotation - Purple
ci_length = ci_high - ci_low
fig.add_annotation(
    y=1.1,  # Adjusted position
    x=(ci_low + ci_high) / 2,
    text=f'CI Length',
    font=dict(size=12, color=ci_length_color),
    align='center',
    bordercolor=ci_length_color,
    borderwidth=1,
    borderpad=4,
    bgcolor='rgba(255, 255, 255, 0.7)',
    showarrow=False  # Remove arrow
)

# Update layout
fig.update_layout(
    xaxis=dict(
        zeroline=False,
        showticklabels=False  # Remove x-axis labels
    ),
    yaxis=dict(
        tickvals=[1],
        ticktext=[''],
        range=[0.5, 1.5]  # Adjust y-axis scale
    ),
    showlegend=True,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.08,
        xanchor="right",
        x=1,
    ),
    margin=dict(l=50, r=50, t=50, b=50),  # Adjust padding for layout
)

fig.show()
```

:::
