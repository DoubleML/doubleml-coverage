---
title: "Basic PLR Models"

jupyter: python3
---

```{python}
#| echo: false

import numpy as np
import pandas as pd
from itables import init_notebook_mode, show, options

init_notebook_mode(all_interactive=True)

def highlight_range(s, level=0.95, dist=0.05, props=''):
    color_grid = np.where((s >= level-dist) &
                          (s <= level+dist), props, '')
    return color_grid


def color_coverage(df, level):
    # color coverage column order is important
    styled_df = df.apply(
        highlight_range,
        level=level,
        dist=1.0,
        props='color:black;background-color:red',
        subset=["Coverage"])
    styled_df = styled_df.apply(
        highlight_range,
        level=level,
        dist=0.1,
        props='color:black;background-color:yellow',
        subset=["Coverage"])
    styled_df = styled_df.apply(
        highlight_range,
        level=level,
        dist=0.05,
        props='color:white;background-color:darkgreen',
        subset=["Coverage"])

    # set all coverage values to bold
    styled_df = styled_df.set_properties(
        **{'font-weight': 'bold'},
        subset=["Coverage"])
    return styled_df


def make_pretty(df, level, n_rep):
    styled_df = df.style.hide(axis="index")
    # Format only float columns
    float_cols = df.select_dtypes(include=['float']).columns
    styled_df = styled_df.format({col: "{:.3f}" for col in float_cols})

    # color coverage column order is important
    styled_df = color_coverage(styled_df, level)
    caption = f"Coverage for {level*100}%-Confidence Interval over {n_rep} Repetitions"

    return show(styled_df, caption=caption)
```

## ATE Coverage

The simulations are based on the  the [make_plr_CCDDHNR2018](https://docs.doubleml.org/stable/api/generated/doubleml.datasets.make_plr_CCDDHNR2018.html)-DGP with $500$ observations.

::: {.callout-note title="Metadata"  collapse="true"}

```{python}
#| echo: false
metadata_file = '../../results/plm/plr_ate_coverage_metadata.csv'
metadata_df = pd.read_csv(metadata_file)
print(metadata_df.T.to_string(header=False))
```

:::

```{python}
#| echo: false

# set up data and rename columns
df = pd.read_csv("../../results/plm/plr_ate_coverage.csv", index_col=None)

assert df["repetition"].nunique() == 1
n_rep = df["repetition"].unique()[0]

display_columns = ["Learner g", "Learner m", "Bias", "CI Length", "Coverage"]
```

### Partialling out

```{python}
# | echo: false
score = "partialling out"
level = 0.95

df_ate_95 = df[(df["level"] == level) & (df["score"] == score)][display_columns]
df_ate_95.rename(columns={"Learner g": "Learner l"}, inplace=True)
make_pretty(df_ate_95, level, n_rep)
```

```{python}
#| echo: false
score = "partialling out"
level = 0.9

df_ate_9 = df[(df['level'] == level) & (df["score"] == score)][display_columns]
df_ate_9.rename(columns={"Learner g": "Learner l"}, inplace=True)
make_pretty(df_ate_9, level, n_rep)
```

### IV-type

For the IV-type score, the learners `ml_l` and `ml_g` are both set to the same type of learner (here **Learner g**).

```{python}
#| echo: false
score = "IV-type"
level = 0.95

df_ate_95 = df[(df['level'] == level) & (df["score"] == score)][display_columns]
make_pretty(df_ate_95, level, n_rep)
```

```{python}
#| echo: false
score = "IV-type"
level = 0.9

df_ate_9 = df[(df['level'] == level) & (df["score"] == score)][display_columns]
make_pretty(df_ate_9, level, n_rep)
```

## ATE Sensitivity

The simulations are based on the  the [make_confounded_plr_data](https://docs.doubleml.org/stable/api/generated/doubleml.datasets.make_confounded_plr_data.html)-DGP with $1000$ observations as highlighted in the [Example Gallery](https://docs.doubleml.org/stable/examples/py_double_ml_sensitivity.html#). As the DGP is nonlinear, we will only use corresponding learners. Since the DGP includes unobserved confounders, we would expect a bias in the ATE estimates, leading to low coverage of the true parameter.

Both sensitivity parameters are set to $cf_y=cf_d=0.1$, such that the robustness value $RV$ should be approximately $10\%$.
Further, the corresponding confidence intervals are one-sided (since the direction of the bias is unkown), such that only one side should approximate the corresponding coverage level (here only the upper coverage is relevant since the bias is positive). Remark that for the coverage level the value of $\rho$ has to be correctly specified, such that the coverage level will be generally (significantly) larger than the nominal level under the conservative choice of $|\rho|=1$.

::: {.callout-note title="Metadata"  collapse="true"}

```{python}
#| echo: false
metadata_file = '../../results/plm/plr_ate_sensitivity_metadata.csv'
metadata_df = pd.read_csv(metadata_file)
print(metadata_df.T.to_string(header=False))
```

:::

```{python}
#| echo: false

# set up data and rename columns
df = pd.read_csv("../../results/plm/plr_ate_sensitivity.csv", index_col=None)

assert df["repetition"].nunique() == 1
n_rep = df["repetition"].unique()[0]

display_columns = [
    "Learner g", "Learner m", "Bias", "Bias (Lower)", "Bias (Upper)", "Coverage", "Coverage (Lower)", "Coverage (Upper)", "RV", "RVa"]
```

```{python}
#| echo: false

import numpy as np
import pandas as pd
from itables import init_notebook_mode, show, options

init_notebook_mode(all_interactive=True)

def highlight_range(s, level=0.95, dist=0.05, props=''):
    color_grid = np.where((s >= level-dist) &
                          (s <= level+dist), props, '')
    return color_grid


def color_coverage(df, level):
    # color coverage column order is important
    styled_df = df.apply(
        highlight_range,
        level=level,
        dist=1.0,
        props='color:black;background-color:red',
        subset=["Coverage", "Coverage (Upper)"])
    styled_df = styled_df.apply(
        highlight_range,
        level=level,
        dist=0.1,
        props='color:black;background-color:yellow',
        subset=["Coverage", "Coverage (Upper)"])
    styled_df = styled_df.apply(
        highlight_range,
        level=level,
        dist=0.05,
        props='color:white;background-color:darkgreen',
        subset=["Coverage", "Coverage (Upper)"])

    # set all coverage values to bold
    styled_df = styled_df.set_properties(
        **{'font-weight': 'bold'},
        subset=["Coverage", "Coverage (Upper)"])
    return styled_df


def make_pretty(df, level, n_rep):
    styled_df = df.style.hide(axis="index")
    # Format only float columns
    float_cols = df.select_dtypes(include=['float']).columns
    styled_df = styled_df.format({col: "{:.3f}" for col in float_cols})

    # color coverage column order is important
    styled_df = color_coverage(styled_df, level)
    caption = f"Coverage for {level*100}%-Confidence Interval over {n_rep} Repetitions"

    return show(styled_df, caption=caption)
```

### Partialling out

```{python}
#| echo: false
score = "partialling out"
level = 0.95

df_ate_95 = df[(df['level'] == level) & (df["score"] == score)][display_columns]
df_ate_95.rename(columns={"Learner g": "Learner l"}, inplace=True)
make_pretty(df_ate_95, level, n_rep)
```

```{python}
#| echo: false
score = "partialling out"
level = 0.9

df_ate_9 = df[(df['level'] == level) & (df["score"] == score)][display_columns]
df_ate_9.rename(columns={"Learner g": "Learner l"}, inplace=True)
make_pretty(df_ate_9, level, n_rep)
```

### IV-type

For the IV-type score, the learners `ml_l` and `ml_g` are both set to the same type of learner (here **Learner g**).

```{python}
#| echo: false
score = "IV-type"
level = 0.95

df_ate_95 = df[(df['level'] == level) & (df["score"] == score)][display_columns]
make_pretty(df_ate_95, level, n_rep)
```

```{python}
#| echo: false
score = "IV-type"
level = 0.9

df_ate_9 = df[(df['level'] == level) & (df["score"] == score)][display_columns]
make_pretty(df_ate_9, level, n_rep)
```