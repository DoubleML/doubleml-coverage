---
title: "Basic PLR Models"

jupyter: python3
---

```{python}
#| echo: false

import numpy as np
import pandas as pd
from itables import init_notebook_mode

init_notebook_mode(all_interactive=True)

def highlight_range(s, level=0.95, dist=0.05, props=''):
    color_grid = np.where((s >= level-dist) &
                          (s <= level+dist), props, '')
    return color_grid


def color_coverage(df, level):
    # color coverage column order is important
    styled_df = df.apply(
        highlight_range,
        level=level,
        dist=1.0,
        props='color:black;background-color:red',
        subset=["Coverage"])
    styled_df = styled_df.apply(
        highlight_range,
        level=level,
        dist=0.1,
        props='color:black;background-color:yellow',
        subset=["Coverage"])
    styled_df = styled_df.apply(
        highlight_range,
        level=level,
        dist=0.05,
        props='color:white;background-color:darkgreen',
        subset=["Coverage"])

    # set all coverage values to bold
    styled_df = styled_df.set_properties(
        **{'font-weight': 'bold'},
        subset=["Coverage"])
    return styled_df


def make_pretty(df, level, n_rep):
    styled_df = df.style.set_caption(f"Coverage at {level} confidence level with {n_rep} repetitions")
    styled_df = styled_df.set_table_styles(
        [{"selector": "caption",
          "props": "caption-side: bottom; font-size:1em;"}]
    )
    styled_df = styled_df.hide(axis="index")
    # Format only float columns
    float_cols = df.select_dtypes(include=['float']).columns
    styled_df = styled_df.format({col: "{:.3f}" for col in float_cols})

    # color coverage column order is important
    styled_df = color_coverage(styled_df, level)

    return styled_df
```

## ATE Coverage

```{python}
#| echo: false

# set up data and rename columns
df = pd.read_csv("../../simulations/plm/results/plr_ate_coverage.csv", index_col=None)

assert df["repetition"].nunique() == 1
n_rep = df["repetition"].unique()[0]
```

### Partialling out

```{python}
#| echo: false
score = "partialling out"
display_columns = ["Learner g", "Learner m", "Bias", "CI Length", "Coverage"]
level = 0.95

df_ate_95 = df[(df['level'] == level) & (df["score"] == score)][display_columns]
df_ate_95.rename(columns={"Learner g": "Learner l"}, inplace=True)
make_pretty(df_ate_95, level, n_rep)
```

```{python}
#| echo: false
score = "partialling out"
display_columns = ["Learner g", "Learner m", "Bias", "CI Length", "Coverage"]
level = 0.9

df_ate_9 = df[(df['level'] == level) & (df["score"] == score)][display_columns]
df_ate_9.rename(columns={"Learner g": "Learner l"}, inplace=True)
make_pretty(df_ate_9, level, n_rep)
```

### IV-type

For the IV-type score, the learners `ml_l` and `ml_g` are both set to the same type of learner (here **Learner g**).
```{python}
#| echo: false
score = "IV-type"
display_columns = ["Learner g", "Learner m", "Bias", "CI Length", "Coverage"]
level = 0.95

df_ate_95 = df[(df['level'] == level) & (df["score"] == score)][display_columns]
make_pretty(df_ate_95, level, n_rep)
```

```{python}
#| echo: false
score = "IV-type"
display_columns = ["Learner g", "Learner m", "Bias", "CI Length", "Coverage"]
level = 0.9

df_ate_9 = df[(df['level'] == level) & (df["score"] == score)][display_columns]
make_pretty(df_ate_9, level, n_rep)
```