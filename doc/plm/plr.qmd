---
title: "Basic PLR Models"

jupyter: python3
---

```{python}
#| echo: false

import numpy as np
import pandas as pd
from itables import init_notebook_mode
import os
import sys

doc_dir = os.path.abspath(os.path.join(os.getcwd(), ".."))
if doc_dir not in sys.path:
    sys.path.append(doc_dir)

from utils.style_tables import generate_and_show_styled_table

init_notebook_mode(all_interactive=True)
```

## ATE Coverage

The simulations are based on the  the [make_plr_CCDDHNR2018](https://docs.doubleml.org/stable/api/generated/doubleml.datasets.make_plr_CCDDHNR2018.html)-DGP with $500$ observations.

::: {.callout-note title="Metadata"  collapse="true"}

```{python}
#| echo: false
metadata_file = '../../results/plm/plr_ate_metadata.csv'
metadata_df = pd.read_csv(metadata_file)
print(metadata_df.T.to_string(header=False))
```

:::

```{python}
#| echo: false

# set up data and rename columns
df_coverage = pd.read_csv("../../results/plm/plr_ate_coverage.csv", index_col=None)

if "repetition" in df_coverage.columns and df_coverage["repetition"].nunique() == 1:
    n_rep_coverage = df_coverage["repetition"].unique()[0]
elif "n_rep" in df_coverage.columns and df_coverage["n_rep"].nunique() == 1:
    n_rep_coverage = df_coverage["n_rep"].unique()[0]
else:
    n_rep_coverage = "N/A" # Fallback if n_rep cannot be determined

display_columns_coverage = ["Learner g", "Learner m", "Bias", "CI Length", "Coverage"]
```

### Partialling out

```{python}
# | echo: false

generate_and_show_styled_table(
    main_df=df_coverage,
    filters={"level": 0.95, "Score": "partialling out"},
    display_cols=display_columns_coverage,
    n_rep=n_rep_coverage,
    level_col="level",
    rename_map={"Learner g": "Learner l"},
    coverage_highlight_cols=["Coverage"]
)
```

```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df_coverage,
    filters={"level": 0.9, "Score": "partialling out"},
    display_cols=display_columns_coverage,
    n_rep=n_rep_coverage,
    level_col="level",
    rename_map={"Learner g": "Learner l"},
    coverage_highlight_cols=["Coverage"]
)
```

### IV-type

For the IV-type score, the learners `ml_l` and `ml_g` are both set to the same type of learner (here **Learner g**).

```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df_coverage,
    filters={"level": 0.95, "Score": "IV-type"},
    display_cols=display_columns_coverage,
    n_rep=n_rep_coverage,
    level_col="level",
    coverage_highlight_cols=["Coverage"]
)
```

```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df_coverage,
    filters={"level": 0.9, "Score": "IV-type"},
    display_cols=display_columns_coverage,
    n_rep=n_rep_coverage,
    level_col="level",
    coverage_highlight_cols=["Coverage"]
)
```

## ATE Sensitivity

The simulations are based on the  the [make_confounded_plr_data](https://docs.doubleml.org/stable/api/generated/doubleml.datasets.make_confounded_plr_data.html)-DGP with $1000$ observations as highlighted in the [Example Gallery](https://docs.doubleml.org/stable/examples/py_double_ml_sensitivity.html#). As the DGP is nonlinear, we will only use corresponding learners. Since the DGP includes unobserved confounders, we would expect a bias in the ATE estimates, leading to low coverage of the true parameter.

Both sensitivity parameters are set to $cf_y=cf_d=0.1$, such that the robustness value $RV$ should be approximately $10\%$.
Further, the corresponding confidence intervals are one-sided (since the direction of the bias is unkown), such that only one side should approximate the corresponding coverage level (here only the upper coverage is relevant since the bias is positive). Remark that for the coverage level the value of $\rho$ has to be correctly specified, such that the coverage level will be generally (significantly) larger than the nominal level under the conservative choice of $|\rho|=1$.

::: {.callout-note title="Metadata"  collapse="true"}

```{python}
#| echo: false
metadata_file_sens = '../../results/plm/plr_ate_sensitivity_metadata.csv'
metadata_df_sens = pd.read_csv(metadata_file_sens)
print(metadata_df_sens.T.to_string(header=False))
```

:::

```{python}
#| echo: false

# set up data and rename columns
df_sensitivity = pd.read_csv("../../results/plm/plr_ate_sensitivity_coverage.csv", index_col=None)

if "repetition" in df_sensitivity.columns and df_sensitivity["repetition"].nunique() == 1:
    n_rep_sensitivity = df_sensitivity["repetition"].unique()[0]
elif "n_rep" in df_sensitivity.columns and df_sensitivity["n_rep"].nunique() == 1:
    n_rep_sensitivity = df_sensitivity["n_rep"].unique()[0]
else:
    n_rep_sensitivity = "N/A"

display_columns_sensitivity = [
    "Learner g", "Learner m", "Bias", "Bias (Lower)", "Bias (Upper)", "Coverage", "Coverage (Lower)", "Coverage (Upper)", "RV", "RVa"]
```


### Partialling out

```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df_sensitivity,
    filters={"level": 0.95, "Score": "partialling out"},
    display_cols=display_columns_sensitivity,
    n_rep=n_rep_sensitivity,
    level_col="level",
    rename_map={"Learner g": "Learner l"},
    coverage_highlight_cols=["Coverage", "Coverage (Upper)"]
)
```

```{python}
#| echo: false
#|
generate_and_show_styled_table(
    main_df=df_sensitivity,
    filters={"level": 0.9, "Score": "partialling out"},
    display_cols=display_columns_sensitivity,
    n_rep=n_rep_sensitivity,
    level_col="level",
    rename_map={"Learner g": "Learner l"},
    coverage_highlight_cols=["Coverage", "Coverage (Upper)"]
)
```

### IV-type

For the IV-type score, the learners `ml_l` and `ml_g` are both set to the same type of learner (here **Learner g**).

```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df_sensitivity,
    filters={"level": 0.95, "Score": "IV-type"},
    display_cols=display_columns_sensitivity,
    n_rep=n_rep_sensitivity,
    level_col="level",
    coverage_highlight_cols=["Coverage", "Coverage (Upper)"]
)
```

```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df_sensitivity,
    filters={"level": 0.9, "Score": "IV-type"},
    display_cols=display_columns_sensitivity,
    n_rep=n_rep_sensitivity,
    level_col="level",
    coverage_highlight_cols=["Coverage", "Coverage (Upper)"]
)
```
