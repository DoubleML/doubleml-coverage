---
title: "CATEs"

jupyter: python3
---

```{python}
#| echo: false

import numpy as np
import pandas as pd
from itables import init_notebook_mode
import os
import sys

doc_dir = os.path.abspath(os.path.join(os.getcwd(), ".."))
if doc_dir not in sys.path:
    sys.path.append(doc_dir)

from utils.style_tables import generate_and_show_styled_table

init_notebook_mode(all_interactive=True)
```

## CATE Coverage

The simulations are based on the  the [make_heterogeneous_data](https://docs.doubleml.org/stable/api/generated/doubleml.datasets.make_heterogeneous_data.html)-DGP with $2000$ observations. The groups are defined based on the first covariate, analogously to the [CATE IRM Example](https://docs.doubleml.org/stable/examples/py_double_ml_cate.html), but rely on [LightGBM](https://lightgbm.readthedocs.io/en/latest/index.html) to estimate nuisance elements (due to time constraints).

The non-uniform results (coverage, ci length and bias) refer to averaged values over all groups (point-wise confidende intervals).

::: {.callout-note title="Metadata"  collapse="true"}

```{python}
#| echo: false
metadata_file = '../../results/irm/irm_cate_coverage_metadata.csv'
metadata_df = pd.read_csv(metadata_file)
print(metadata_df.T.to_string(header=False))
```

:::


```{python}
#| echo: false

# set up data and rename columns
df = pd.read_csv("../../results/irm/irm_cate_coverage.csv", index_col=None)

assert df["repetition"].nunique() == 1
n_rep = df["repetition"].unique()[0]

display_columns = ["Learner g", "Learner m", "Bias", "CI Length", "Coverage", "Uniform CI Length", "Uniform Coverage"]
```

```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df,
    filters={"level": 0.95},
    display_cols=display_columns,
    n_rep=n_rep,
    level_col="level",
    coverage_highlight_cols=["Coverage", "Uniform Coverage"]
)
```

```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df,
    filters={"level": 0.9},
    display_cols=display_columns,
    n_rep=n_rep,
    level_col="level",
    coverage_highlight_cols=["Coverage", "Uniform Coverage"]
)
```
