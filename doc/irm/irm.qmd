---
title: "Basic IRM Models"

jupyter: python3
---

```{python}
#| echo: false

import numpy as np
import pandas as pd
from itables import init_notebook_mode
import os
import sys

doc_dir = os.path.abspath(os.path.join(os.getcwd(), ".."))
if doc_dir not in sys.path:
    sys.path.append(doc_dir)

from utils.style_tables import generate_and_show_styled_table

init_notebook_mode(all_interactive=True)
```

## ATE Coverage

The simulations are based on the  the [make_irm_data](https://docs.doubleml.org/stable/api/generated/doubleml.datasets.make_irm_data.html)-DGP with $500$ observations. Due to the linearity of the DGP, Lasso and Logit Regression are nearly optimal choices for the nuisance estimation.

::: {.callout-note title="Metadata"  collapse="true"}

```{python}
#| echo: false
metadata_file = '../../results/irm/irm_ate_coverage_metadata.csv'
metadata_df = pd.read_csv(metadata_file)
print(metadata_df.T.to_string(header=False))
```

:::

```{python}
#| echo: false

# set up data
df_ate_cov = pd.read_csv("../../results/irm/irm_ate_coverage.csv", index_col=None)

assert df_ate_cov["repetition"].nunique() == 1
n_rep_ate_cov = df_ate_cov["repetition"].unique()[0]

display_columns_ate_cov = ["Learner g", "Learner m", "Bias", "CI Length", "Coverage"]
```


```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df_ate_cov,
    filters={"level": 0.95},
    display_cols=display_columns_ate_cov,
    n_rep=n_rep_ate_cov,
    level_col="level",
    coverage_highlight_cols=["Coverage"]
)
```


```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df_ate_cov,
    filters={"level": 0.9},
    display_cols=display_columns_ate_cov,
    n_rep=n_rep_ate_cov,
    level_col="level",
    coverage_highlight_cols=["Coverage"]
)
```


## ATTE Coverage

As for the ATE, the simulations are based on the  the [make_irm_data](https://docs.doubleml.org/stable/api/generated/doubleml.datasets.make_irm_data.html)-DGP with $500$ observations.

::: {.callout-note title="Metadata"  collapse="true"}

```{python}
#| echo: false
metadata_file = '../../results/irm/irm_atte_metadata.csv'
metadata_df = pd.read_csv(metadata_file)
print(metadata_df.T.to_string(header=False))
```

:::

```{python}
#| echo: false

# set up data
df_atte_cov = pd.read_csv("../../results/irm/irm_atte_coverage.csv", index_col=None)

assert df_atte_cov["repetition"].nunique() == 1
n_rep_atte_cov = df_atte_cov["repetition"].unique()[0]

display_columns_atte_cov = ["Learner g", "Learner m", "Bias", "CI Length", "Coverage"]
```


```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df_atte_cov,
    filters={"level": 0.95},
    display_cols=display_columns_atte_cov,
    n_rep=n_rep_atte_cov,
    level_col="level",
    coverage_highlight_cols=["Coverage"]
)
```


```{python}
#| echo: false

generate_and_show_styled_table(
    main_df=df_atte_cov,
    filters={"level": 0.9},
    display_cols=display_columns_atte_cov,
    n_rep=n_rep_atte_cov,
    level_col="level",
    coverage_highlight_cols=["Coverage"]
)
```

## Sensitivity

The simulations are based on the  the ADD-DGP with $10,000$ observations. As the DGP is nonlinear, we will only use corresponding learners. Since the DGP includes an unobserved confounder, we would expect a bias in the ATE estimates, leading to low coverage of the true parameter.

The confounding is set such that both sensitivity parameters are approximately $cf_y=cf_d=0.1$, such that the robustness value $RV$ should be approximately $10\%$.
Further, the corresponding confidence intervals are one-sided (since the direction of the bias is unkown), such that only one side should approximate the corresponding coverage level (here only the lower coverage is relevant since the bias is positive). Remark that for the coverage level the value of $\rho$ has to be correctly specified, such that the coverage level will be generally (significantly) larger than the nominal level under the conservative choice of $|\rho|=1$.

### ATE

::: {.callout-note title="Metadata"  collapse="true"}

```{python}
#| echo: false
metadata_file = '../../results/irm/irm_ate_sensitivity_metadata.csv'
metadata_df = pd.read_csv(metadata_file)
print(metadata_df.T.to_string(header=False))
```

:::

```{python}
#| echo: false

# set up data and rename columns
df_ate_sens = pd.read_csv("../../results/irm/irm_ate_sensitivity.csv", index_col=None)

assert df_ate_sens["repetition"].nunique() == 1
n_rep_ate_sens = df_ate_sens["repetition"].unique()[0]

display_columns_ate_sens = [
    "Learner g", "Learner m", "Bias", "Bias (Lower)", "Bias (Upper)", "Coverage", "Coverage (Lower)", "Coverage (Upper)", "RV", "RVa"]
rename_map_sens = {"Learner g": "Learner l"}
coverage_highlight_cols_sens = ["Coverage", "Coverage (Lower)"]
```

```{python}
#| echo: false
generate_and_show_styled_table(
    main_df=df_ate_sens,
    filters={"level": 0.95},
    display_cols=display_columns_ate_sens,
    n_rep=n_rep_ate_sens,
    level_col="level",
    rename_map=rename_map_sens,
    coverage_highlight_cols=coverage_highlight_cols_sens
)
```

```{python}
#| echo: false
generate_and_show_styled_table(
    main_df=df_ate_sens,
    filters={"level": 0.9},
    display_cols=display_columns_ate_sens,
    n_rep=n_rep_ate_sens,
    level_col="level",
    rename_map=rename_map_sens,
    coverage_highlight_cols=coverage_highlight_cols_sens
)
```

### ATTE

::: {.callout-note title="Metadata"  collapse="true"}

```{python}
#| echo: false
metadata_file = '../../results/irm/irm_atte_sensitivity_metadata.csv'
metadata_df = pd.read_csv(metadata_file)
print(metadata_df.T.to_string(header=False))
```

:::

```{python}
#| echo: false

# set up data
df_atte_sens = pd.read_csv("../../results/irm/irm_atte_sensitivity.csv", index_col=None)

assert df_atte_sens["repetition"].nunique() == 1
n_rep_atte_sens = df_atte_sens["repetition"].unique()[0]

display_columns_atte_sens = [
    "Learner g", "Learner m", "Bias", "Bias (Lower)", "Bias (Upper)", "Coverage", "Coverage (Lower)", "Coverage (Upper)", "RV", "RVa"]
```

```{python}
#| echo: false
generate_and_show_styled_table(
    main_df=df_atte_sens,
    filters={"level": 0.95},
    display_cols=display_columns_atte_sens,
    n_rep=n_rep_atte_sens,
    level_col="level",
    rename_map=rename_map_sens,
    coverage_highlight_cols=coverage_highlight_cols_sens
)
```

```{python}
#| echo: false
generate_and_show_styled_table(
    main_df=df_atte_sens,
    filters={"level": 0.9},
    display_cols=display_columns_atte_sens,
    n_rep=n_rep_atte_sens,
    level_col="level",
    rename_map=rename_map_sens,
    coverage_highlight_cols=coverage_highlight_cols_sens
)
```
